#!/usr/bin/python

import sys,os

#------------------------CQenze Visual --------------------------

colors = []
colorsHX = []
colorsString = []

with open("CQenzeVisual/colors","r") as color:
    buf = ""
    for line in color:
        for char in line:
            if char == "\t" or char == " ":
                pass
            elif char != "\n":
                buf = buf + char;
            else:
                colors.append(buf.split("#",))
                buf = ""

for i in colors:
    string, HX = i
    colorsHX.append("#"+HX)
    colorsString.append(string)

def colortoHX(color):
    for c,n in colors:
        if c == color:
            return n
    
def cqzColors(c,p):
    with open("CQenzeVisual/Template.js","r") as template:
        buff = template.read()
        with open("CQenzeVisual/CQenze.js","w") as script:
            script.write("// Autogenerated javascript file from CQZlang\n\n")
            script.write("var colors = %s;\n"%c)
            script.write("var pattern = %s;"%p)
            script.write(buff)
            
#------------------------------------------------------------------
            
def test(arg):
    try:
        ID,ident = arg.split()
        return ID, ident
    except:
        ID = arg
        return ID

def checkID(samp):
    if samp not in samples:
        if samp not in colorsString:
            print "Syntax error: \'%s\' is not a keyword in CQenze." %samp
        else:
            return 'IDC'
    else:
        return 'IDM'

path = os.getcwd()

samples = os.listdir(path+"/dirt")
samples_cap = []

for i in range(len(samples)):
     if os.path.isdir(path + "/dirt/" + str(samples[i])):
         num = len(os.listdir(path + "/dirt/" + str(samples[i])))
         samples_cap.append((samples[i],num))
    
table = []
buf = ''
buff = ''
body = False

stm = []
identSTM = []

IDs = []
idCount = 0
tempo = "120"


try:
    filename = sys.argv[1]
except:
    print "The file to compile is missing."

with open(filename,"r") as fileIn:
    for line in fileIn:
        if 'ID' in line:
            i, ident = test(line[:-1])
            table.append((checkID(ident),ident))
            if ident not in IDs:
                IDs.append(ident)
        elif 'PATTERN' in line:
            table.append(test(line[:-1]))
        elif 'TEMPO' in line:
            table.append(line[:-1])
        elif 'CYCLES' in line:
            table.append(line[:-1])
        elif 'NUMBER' in line:
            i, ident = test(line[:-1])
            table.append((i, ident))
        elif 'STRING' in line:
            string = line[:-1].split()
            table.append((string[0],' '.join(string[1:])))
        else:
            table.append(line[:-1])
    
for n,token in enumerate(table):
    try:
        token, Ident = token
        buff = buff + ' ' + Ident
    except:
        token = token
    if body == False and token != 'END':
        buf = buf + ' ' +token
    elif body == False and token == 'END':
        buf = buf + ' ' + token
        stm.append(buf)
        identSTM.append(buff)
        buff = ''
        buf = ''
    elif body == True:
        buf = buf + ' ' + token

#-------------------------Parser----------------------------

def checkNumSamples(array,samp,arg):
    for i,j in array:
        if i == samp:
            if int(arg) <= j:
                return j
            else:
                print "Syntax error: \'%s\' have \'%i\' samples, \'%i\' is too big." % (samp,j,int(arg))
                return 1

def patternConvert(pattern):
    converted = ''
    for char in pattern:
        if char == '+':
            converted = converted + '1,'
        else:
            converted = converted + '0,'
    return converted[:-1]

def patternConvertC(pattern):
    converted = []
    for char in pattern:
        if char == '+':
            converted.append(1)
        else:
            converted.append(0)
    return converted

def IDnum(samp):
    if samp in IDs:
        return IDs.index(samp)

measures = 16
cycles = 2
sync = 1

header = '// Autogenerated CHmUsiCK file from CQenze\n\nGain gate => dac;\n\n'
neck = ""
files = ""
body = ""
colorsList = []
patternList = []

for n,sentence in enumerate(stm):
    if sentence == ' IDM ASSIGN_T PATTERN END':
        samp, pattern = identSTM[n].split()
        if samp not in IDs:
            print "CQenze: Duplicated sample keyword"
            continue
        neck = neck + 'Sampler d%i => gate;\n' %IDnum(samp)
        files = files + 'd%i.file(\"%s\","");\n' %(IDnum(samp),samp)
        body = body + 'spork~d%i.soundT([%s]);\n' %(IDnum(samp),patternConvert(pattern))
        IDs[IDnum(samp)] = ''
    elif sentence == ' IDM ASSIGN_C PATTERN END':
        samp, pattern = identSTM[n].split()
        if samp not in IDs:
            print "CQenze: Duplicated sample keyword"
            continue
        neck = neck + 'Sampler d%i => gate;\n' %IDnum(samp)
        files = files + 'd%i.file(\"%s\","");\n' %(IDnum(samp),samp)
        body = body + 'spork~d%i.soundC([%s]);\n' %(IDnum(samp),patternConvert(pattern))
        IDs[IDnum(samp)] = ''
    elif sentence == ' IDC ASSIGN_T PATTERN END':
        color, pattern = identSTM[n].split()
        colorsList.append('#'+colortoHX(color))
        patternList.append(patternConvertC(pattern))
    elif sentence == ' IDM ASSIGN_SAMP NUMBER ASSIGN_T PATTERN END':
        samp, num, pattern = identSTM[n].split()
        if samp not in IDs:
            print "CQenze: Duplicated sample keyword"
            continue
        checkNumSamples(samples_cap,samp,num)
        neck = neck + 'Sampler d%i => gate;\n' %IDnum(samp)
        files = files + 'd%i.file(\"%s\","%s");\n' %(IDnum(samp),samp,num)
        body = body + 'spork~d%i.soundT([%s]);\n' %(IDnum(samp),patternConvert(pattern))
        IDs[IDnum(samp)] = ''
    elif sentence == ' IDM ASSIGN_SAMP NUMBER ASSIGN_C PATTERN END':
        samp, num, pattern = identSTM[n].split()
        if samp not in IDs:
            print "CQenze: Duplicated sample keyword"
            continue
        checkNumSamples(samples_cap,samp,num)
        neck = neck + 'Sampler d%i => gate;\n' %IDnum(samp)
        files = files + 'd%i.file(\"%s\","%s");\n' %(IDnum(samp),samp,num)
        body = body + 'spork~d%i.soundC([%s]);\n' %(IDnum(samp),patternConvert(pattern))
        IDs[IDnum(samp)] = ''
    elif sentence == ' STRING END':
        neck = neck + 'Sampler dr => gate;\n'
        body = body + 'spork~dr.read(%s,%i);\n' %(identSTM[n],len(identSTM[n])-3)
    elif sentence == ' TEMPO NUMBER END':
        tempo = identSTM[n]
    elif sentence == ' CYCLES NUMBER END':
        cycles = int(identSTM[n])

    else:
        print 'Syntax error: %i statement is not a valid CQenze syntax' %(n+1)

cqzColors(colorsList,patternList)

sync = cycles * measures

header = header + "\n%i => Sampler.TEMPO;\n%i => Sampler.CYCLES;\n\n" %(int(tempo),int(cycles))
end = '\n((60.0/Sampler.TEMPO)*%i)::second => now;\nMachine.add(me.dir() + ".CQZtemp.ck");' %sync
print sync
try:
    with open(sys.argv[2]+".ck","w") as output:
        output.write(header +neck +"\n" +files +"\n"+ body + end)
except:
    with open(".CQZtemp.ck","w") as output:
        output.write(header +neck +"\n" +files +"\n"+ body + end)

