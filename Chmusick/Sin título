Chmusick live => JCRev rev => Gain gate => dac;
Notes notes;

SinOsc bass;
SawOsc melody;
TheCooker synthCook => rev;
Rhodey wurley => rev;
Harmony pad => rev;

live.file("kick",5) => Buffer.d1.read;
live.file("hihat",4) => Buffer.d2.read;
live.file("arpy") => Buffer.d3.read;
live.file("dorkbot") => Buffer.d4.read;
live.file("erk") => Buffer.d5.read;
live.file("elec",8) => Buffer.d6.read;
live.file("claps",5) => Buffer.d7.read;

2 => live.CYCLES;
4 => live.MEASURE;
140 => live.TEMPO;
0.7 => gate.gain;
0.025 => rev.mix;
0.18 => melody.gain;
0.3 => wurley.gain;

live.subArray(live.transpose(notes.modes(1),48),[0,-1,-1,-1,-1,4,-1,-1,-1,-1]) @=> int tri[];
live.every(4) @=> int bdR[];
(live.every(4),1) => live.rotate => live.densify @=> int hhR[];
live.every(4) => live.densify => live.rotate @=> int arpyR[];
[36,0,0,36,0,0,36,0,0,36,0,0,36,0,0,36,44,0,0,44,0,0,44,0,0,46,0,0,46,0,0,46] @=> int bassR[];
[1,0] @=> int battlesR[];
[1,1,1,1,1,1,1,1] => live.degrade @=> int test[];
[60,0,60,0,67,72] @=> int synthR[];
[0,0,1,0,1,0,0,0,1,0,0,1,0,0,1,0] @=> int clave[];
[40,0,0,0,0,43,0,0] @=> int bassR1[];
[64,66,67,71,76] => live.randomize @=> int mel[];

/*spork~live.play(Buffer.d8,["casio","~"],0);*/
spork~live.play(melody,[67,66,64,0],0);
/*spork~live.play(Buffer.d1,bdR,0);*/
/*spork~live.play(Buffer.d2,[0,1]);*/
/*spork~live.play(Buffer.d3,arpyR,3);*/
/*spork~live.play(bass,bassR1,0);*/
/*spork~live.play(Buffer.d4,battlesR,0);*/
/*spork~synthCook.sound(16,synthR); //change function name*/
/*spork~live.play(Buffer.d5,[1,0,0,0,1,0,1,0]);*/
/*spork~live.play(wurley,[0,0,0,0,48,0,0,0],2);*/
/*spork~live.play(Buffer.d6,[0,1,0,0,1,0],3);*/
/*spork~live.play(Buffer.d7,[0,0,1,0],0);*/
/*spork~pad.sinOsc(["em"],4);*/

//spork~synth([67,0,0,67,0,0,67,0,0,67,0,0,67,0,0,67,68,0,0,68,0,0,68,0,0,65,0,0,65,0,0,65]);
//spork~synth([60,0,0,60,0,0,60,0,0,60,0,0,60,0,0,60,56,0,0,56,0,0,56,0,0,58,0,0,58,0,0,58]);
spork~synth([63,0,0,63,0,0,63,0,0,63,0,0,63,0,0,63]);

while(true){
    live.Dur(live.TEMPO,live.MEASURE) => now;
}

public void synth(int sample[])
{
    SawOsc saw[4];
    SinOsc mel;
    SinOsc bass;
    Envelope envelope;
    JCRev rev;
    Gain amp;
    Noise n => ResonZ f => Envelope env1 => dac;
    10 => f.Q;
    rev.mix(0.1);
    amp.gain(0.0013);
    for(0 => int i; i < saw.cap(); i++){
        saw[i] => envelope => rev => amp => dac;
    }
    mel => envelope;
    bass => envelope;
    bass.gain(6);
    0.09 => envelope.time;
    while(true)
    {
        for(0 => int i; i < sample.cap(); i++)
        {
            if (sample[i] != 0)
            {
                Std.mtof(sample[i]) => f.freq;
                Std.mtof(sample[i]) => saw[0].freq;
                Std.mtof(sample[i]+12) => saw[1].freq;
                Std.mtof(sample[i]-12)-2 => saw[2].freq;
                Std.mtof(sample[i])+2 => saw[3].freq;
                Std.mtof(sample[i]+7) => mel.freq;
                Std.mtof(sample[i]-24) => bass.freq;
                envelope.keyOn();
                env1.keyOn();
                0.125::second => now;
                envelope.keyOff();
                env1.keyOff();
                0.125::second => now;
            }


            if (sample[i] == 0)
            {
                envelope.keyOff();
                0.25::second => now;
            }
        }
    }
}
